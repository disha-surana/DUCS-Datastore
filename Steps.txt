1. npm init
2. npm install express ejs --save
3. turn on the mongod 
4. node app.js

*******************************************************************************************************
//Steps for Adding user authentication: 
/*
`Makes us login and logout
`passport : We'll use some existing tools(passport js) for adding authentication
`We'll use Local authentication 
`passport-Local : username password
`passport-local-mongoose: helps us in making quicker
`Chooe your secret pages(pages which will be shown after login)
`3 links: login, register, logout
`express-session : We'll make use of sessions(allows to have state) to remain loggedin, since http is stateless protocol it has no information of history.
`Set your routes and secret routes.
`Set your mongoose and body-Parser as database will contain user info and login form data need to be parsed before use
`Create User Model:

*/
1.Terminal:: npm install passport passport-local passport-local-mongoose express-session --save

2.App.js import all these packages::
 var passport = require("passport"),
     LocalStrategy = require("passport-local"),
     passportLocalMongoose = require("passport-local-mongoose");

3. Create a directory models and create user.js and add code:
var mongoose = require("mongoose");
var UserSchema = new mongoose.Schema({
    username: String,
    password: String
});
module.exports = mongoose.model("User",UserSchema);

4. App.js require user model here:
 var User= require("./models/user");

5. Add passportLocalMongoose(comes with a lot of functions which we will add to our userschema) to user.ejs::
var mongoose = require("mongoose");
var passportLocalMongoose = require("passport-local-mongoose");
var UserSchema = new mongoose.Schema({
    username: String,
    password: String
});
UserSchema.plugin(passportLocalMongoose);
module.exports = mongoose.model("User",UserSchema);

6. Setting express-session in app.js (requiring, and excecuting simultaneously with some parameters and then using)
app.use(require("express-session")({
    secret: "Any random sentence",
    resave: false,
    saveUninitialized: false
}));

7. Setting passport in App.js ::
app.use(passport.initialize());
app.use(passport.session());

8. Methods used for encoding and decoding session data::
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

REGISTER
9.Make AUTH routes ::
GET /register : showing register form
register.ejs  : create form action(/register) and method(POST)
POST /register : handling registration 


10. 
POST /register , we do not save the password in the database instead we pass it as 2nd agr in user.register which hashes the password and stores that in data base and it will return the new user that has info and hashed password which is 2nd argument of 3rd parameter callback function. authenticate method logs the user in and stores all session related essential info and calls serialize method and the 'local' states that it is using local login services.
app.post("/register", function(req,res){
    req.body.username
    req.body.password 
    User.register(new User({username: req.body.username}), req.body.password, function(err, user){
        if(err){
            console.log(err);
            return res.render('register');
        }
        passport.authenticate("local")(req,res, function(){
            res.redirect("/secret");
        });
    });
});

11. 
LOGIN 
Add routes:
GET /login : renders login form
login.ejs: form ->redirect to /login POST
POST /login: check if correct credentials login or move again to GET /login 

12. POST with middleware which checks if correctly logged in
app.post("/login",passport.authenticate("local",{
    successRedirect: "/secret",
    failureRedirect: "/login"
}),function(req,res){

});

13. passport.use(new LocalStrategy(User.authenticate())); //above says use authenticate method

14. 
LOGOUT
GET /logout 

app.get("/logout",function(req,res){
    req.logout();
    res.redirect("/");
})

15. middleware on every secret route next() says run net function in arguments or redirect back to login
function isLoggedIn(req, res , next){
    if(req.isAuthenticated()){
        return next();
    }
    res.redirect("/login");
}

app.get("/secret",isLoggedIn, function(req,res){

});
***************************************************************************************************

ROUTES:
1. "/"                  renders landing.ejs
2. "/home"              renders home.ejs
3. "/sem/:no"           renders sem.ejs and prints subjects of sem "no" in cards
4. "/sem/:no/:subj"     renders unp.ejs and prints posts of :subj subject of sem :no
5. "/login"
6. "/logout"
7. "/register"

****************************************************************************************************
ADD FLASH MESSAGES: messages we want to last 1 req/res and when user refershes goes away
1. npm install connect-flash --save
2. var flash = require("connect-flash");
3. app.use(flash());   //execute that variable
4. req.flash("error","You need to be logged in to do that!");  
//In flash add this msg (doesnot display anything yet) meaning is add msg "please login first" to the key "error"
//add this in middleware loggin func before redirect**
5. res.render("login",{message: req.flash("error")}); 
//Add this is login route
//Initially flash key:error value:"" but once the middleware is called and it fails then value is added "please login first" to the key "error" to the key:"error" and then login page ecieves this msg, once we refersh that page again flash key:erorr's value is ""
6. <%=message%>
//Add this to login.ejs to display msg 
Check 2 errors
/*Also, if you're getting an error along the lines of: "req.flash is not a function", then be sure that the following line: app.use(flash());  comes before your passport configuration in app.js*/
/*if(err){
  req.flash("error", err.message);
  return res.redirect("/register");
}*/
6*. Since we want this msg at every template lets add <h1><%=message%></h1> to the header
5*. Now since every single route will need a message para passed at render statement we'll instead add this to app.js func originally written at the time of authentication where we pas currentuser to all templates via local para 
app.use(function(req, res, next){
    res.locals.currentUser = req.user;
    res.locals.message = req.flash("error");
    next();
});
8. In the logout route add new value to flash, since we want 2 different red and green flash messages we'll add one more key "success"
    req.flash("success","Logged you out!");
5**. Change it to
app.use(function(req, res, next){
    res.locals.currentUser = req.user;
    res.locals.error = req.flash("error");
    res.locals.success = req.flash("success");
    next();
});
9. Add this it header
//even if error is emptyit is not undefined it is [] , so add length check also
    <div class="container">
        <% if(error && error.length > 0){ %>
            <div class="alert alert-danger" role="alert">
                <%= error %>
            </div>
        <% } %>
        <% if(success && success.length > 0){ %>
            <div class="alert alert-success" role="alert">
                <%= success %>
            </div>
        <% } %>
    </div>

    req.flash("success","logged out");
    req.flash("error","Login in first");
    req.flash("error","Something not found in database");
****************************************************************************************
ADDING ADMIN : https://www.youtube.com/watch?v=somc45pnM2k
****************************************************************************************
GIT: Version control
1. [git init ]              : To initialize git repo in your project folder
2. [git status ]            : (check untracked files) To check if any file is left that is not yet added to git
3. git add                  : Add files to git repo these are not yet committed. eg: [git add one.js] eg: [git add . ](all)
4. [git commit -m "Message"]: Commit to git and m is message you want to add. *Always add files before commit
5. [git log]                : To view all commits you have made so far, helps us to move back to a previous version. Press q to quit. This provides all the commits we have made so far with a unique hash value attached to each commit which can be used to view that pervious project version by checkout command below.
6. [git checkout 85759]  : This allows us to view previous version and before viewing a version we need to commit the latest changes made otherwise they'll be removed. To move back to master(recent) version/commit write.. [git checkout master].
If you don't just want to view instead move to previous version completely then you need to change your master code to a previous version.
7. [git revert --no--commit 86575847..HEAD]: To revert back to prev version now we have to commit again [git commit] no need to add.
*****************************************************************************************
HEROKU SETUP
1. Create a free account on heroku select language and then start tutorial.
2. Download the heroku exe file and install it.
3. heroku login 
4. commit on git
5. heroku create name (in bash terminal) //we'll get a url and adds a remote to git repo to which we can push our code to [git remote -v]
{
    TERMINALS:
    1. Open terminal, it should be visible (use ctrl+` or from menu View-> Integrated Terminal )
    2. Open commands search (use Ctrl+Shift+P or from menu View->Command Palette...)
    3. In command box Type "Terminal: Select Default Shell" to select this option from drop down.
    4. As you select this option, then all the available commands which are in path will be listed below like below
    5. Just click any one which you like to add for quick access from command list.
    7. Finally, in the terminal window, just click on + sign next to terminal list. The terminal selected in step 5 will now added after performing step6 to the list without removal of earlier terminal.Repeat step 3-6 for adding any other terminal to command list.To work with particular terminal just select the required one in the terminal list of the terminal window.
}
(add start script in package.json
"start": "node app.js")
6. [git push heroku master]  //pushes all code to heroku master
7. [heroku logs] : to view error msges while deploying
8. if you make any modifications first commit and the 6.
    git status
    git add package.json
    git commit -m "Message"
    git push heroku master
